Fork: forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea

If you want to ignore a file that is already checked in, you must untrack the file before you add a rule to ignore it. From your terminal, untrack the file: $ git rm --cached FILENAME 

If you want to collaborate with the original repository, you'd add a new remote URL, typically called upstream, to your local Git clone: git remote add upstream <THEIR_REMOTE_URL>

Now, you can fetch updates and branches from their fork: git fetch upstream

PULL REQUEST: a request to have your code pulled into another branch – so you make a PR from the feature branch to the master branch – then someone will review it, make comments, ask to have it updated, etc. Once the PR is merged, you generally delete your feature branch and switch back to the master branch

Forking is done on the GitHub Account while Cloning is done using Git. When you fork a repository, you create a copy of the original repository (upstream repository) but the repository remains on your GitHub account. Whereas, when you clone a repository, the repository is copied on to your local machine with the help of Git.

Changes made to the forked repository can be merged with the original repository via a pull request. Pull request knocks the repository owner and tells that "I have made some changes, please merge these changes to your repository if you like it". On the other hand, changes made on the local machine (cloned repository) can be pushed to the upstream repository directly. For this, the user must have the write access to the repository otherwise this is not possible. If the user does not have write access, the only way to go is through the forked request. So in that case, the changes made in the cloned repository are first pushed to the forked repository and then a pull request is created. It is a better option to fork before clone if the user is not declared as a contributor and it is a third-party repository (not of the organization).

Forking is a concept while cloning is a process. Forking is just containing a separate copy of the repository and there is no command involved. Cloning is done through the command 'git clone' and it is a process of receiving all the code files to the local machine.

Forking just acts as a middleman between the user and the upstream repository.

When a Git repository is cloned, the target repository remains shared amongst all of the developers who had previously contributed to it. Other developers who had previously contributed to that codebase will continue to push their changes and pull updates from the cloned repository. Any developer who clones a repository can synchronize their copy of the codebase with any updates made by fellow developers.

In contrast to a clone, a Git fork operation will create a completely new copy of the target repository. The developer who performs the fork will have complete control over the newly copied codebase. Developers who contributed to the Git repository that was forked will have no knowledge of the newly forked repo. Previous contributors will have no means with which they can contribute to or synchronize with the Git fork unless the developer who performed the fork operation provides access to them.